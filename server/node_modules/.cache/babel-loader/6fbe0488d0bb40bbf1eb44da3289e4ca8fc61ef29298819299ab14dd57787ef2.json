{"ast":null,"code":"import express from \"express\";\nimport cors from \"cors\";\nimport { v4 as uuidv4 } from \"uuid\"; //importing version 4 this helps to give users unique id\nimport bcrypt from \"bcrypt\";\nimport { StreamChat } from \"stream-chat\";\nconst app = express();\napp.use(cors());\napp.use(express.json()); //be able to accept json from frontend\nconst api_key = \"qud777xuvfy9\"; //you get it from getstream.io\nconst api_secret = \"7kkpxfep64gfwxwy9qg4nj9gtqxyagzkytjq7v3zhu4pbumxxjxq8rjduc8hem3x\"; //dont have this publicly on github\nconst serverClient = StreamChat.getInstance(api_key, api_secret); //connects a user and creates an account in our stream server\n\napp.post(\"/createAccount\", async (req, res) => {\n  //a route in express\n  try {\n    //in case errors occur\n    const {\n      firstName,\n      lastName,\n      username,\n      password\n    } = req.body; //requesting those pieces of info\n    const userId = uuidv4(); //gives users unique ids that are completely random\n    const hashedPassword = await bcrypt.hash(password, 10); //adds salt into the password then hashes it\n    const token = serverClient.createToken(userId); //creates a token that will identify the user\n    console.log(\"Response Data:\", {\n      token,\n      userId,\n      firstName,\n      lastName,\n      username,\n      hashedPassword\n    });\n    res.json({\n      token,\n      userId,\n      firstName,\n      lastName,\n      username,\n      hashedPassword\n    });\n  } catch (error) {\n    res.json(error);\n  }\n}); //this creates an account in stream\napp.post(\"/login\", async (req, res) => {\n  try {\n    const {\n      username,\n      password\n    } = req.body;\n    const {\n      users\n    } = await serverClient.queryUsers({\n      name: username\n    });\n    if (users.length === 0) return res.json({\n      message: \"User not found\"\n    });\n    const token = serverClient.createToken(users[0].id);\n    const passwordMatch = await bcrypt.compare(password, users[0].hashedPassword);\n    if (passwordMatch) {\n      //checks if they match and if they do create the cookies\n      res.json({\n        token,\n        firstName: users[0].firstName,\n        lastName: users[0].lastName,\n        username,\n        userId: users[0].id\n      });\n    } else {\n      res.status(401).json({\n        message: \"Incorrect password\"\n      }); // Password does not match\n    }\n  } catch (error) {\n    res.json(error);\n  }\n});\napp.listen(3001, () => {\n  console.log(\"server is running on 3001\");\n});","map":{"version":3,"names":["express","cors","v4","uuidv4","bcrypt","StreamChat","app","use","json","api_key","api_secret","serverClient","getInstance","post","req","res","firstName","lastName","username","password","body","userId","hashedPassword","hash","token","createToken","console","log","error","users","queryUsers","name","length","message","id","passwordMatch","compare","status","listen"],"sources":["/Users/krwong3/CSE108/finalProject-2/server/src/index.js"],"sourcesContent":["import express from \"express\";\nimport cors from \"cors\";\nimport {v4 as uuidv4} from \"uuid\"; //importing version 4 this helps to give users unique id\nimport bcrypt from \"bcrypt\";\nimport {StreamChat} from \"stream-chat\";\nconst app = express();\n\napp.use(cors());\napp.use(express.json());//be able to accept json from frontend\nconst api_key = \"qud777xuvfy9\";//you get it from getstream.io\nconst api_secret = \"7kkpxfep64gfwxwy9qg4nj9gtqxyagzkytjq7v3zhu4pbumxxjxq8rjduc8hem3x\"; //dont have this publicly on github\nconst serverClient = StreamChat.getInstance(api_key, api_secret);//connects a user and creates an account in our stream server\n\napp.post(\"/createAccount\", async (req, res) => {//a route in express\n    try{//in case errors occur\n        const {firstName, lastName, username, password} = req.body //requesting those pieces of info\n        const userId = uuidv4(); //gives users unique ids that are completely random\n        const hashedPassword = await bcrypt.hash(password, 10); //adds salt into the password then hashes it\n        const token = serverClient.createToken(userId);//creates a token that will identify the user\n        console.log(\"Response Data:\", {token, userId, firstName, lastName, username, hashedPassword});\n\n        res.json({token, userId, firstName, lastName, username, hashedPassword});\n    }\n    catch (error){\n        res.json(error);\n    }\n});//this creates an account in stream\napp.post(\"/login\", async (req, res) => {\n    try{\n        const {username, password} = req.body;\n        const {users} = await serverClient.queryUsers({name: username});\n        if(users.length ===0) return res.json({message: \"User not found\"});\n        const token = serverClient.createToken(users[0].id);\n        const passwordMatch = await bcrypt.compare(password, users[0].hashedPassword);\n        if(passwordMatch){//checks if they match and if they do create the cookies\n            res.json({\n                token,\n                firstName: users[0].firstName,\n                lastName: users[0].lastName,\n                username,\n                userId: users[0].id,\n            });\n        }\n        else {\n            res.status(401).json({ message: \"Incorrect password\" }); // Password does not match\n        }\n    }\n    catch (error) {\n        res.json(error);\n    }\n});\n\napp.listen(3001, ()=> {\n    console.log(\"server is running on 3001\");\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}